/*
* <<1. 프로토콜이란 무엇인가>>
* "컴퓨터 상호간의 대화에 필요한 통신 규약"
* 쉽게 말해서 프로토콜은 약속이다. 서로 데이터를 주고받기 위해서 정의해 놓은 약속을 뜻한다.
* 
* <<2. 소켓의 생성>>
* 이번 쳅터의 목적은 socket 함수 하나를 제대로 이해하는 것이다.
* SOCKET socket(int domain, int type, int protocol)
* retval	: 소켓 핸들
* domain	: 소켓이 사용할 프로토콜 체계 정보 전달
* type		: 소켓의 데이터 전송 방식에 대한 정보 전달
* protocol	: 두 컴퓨터간 통신에 사용되는 프로토콜 정보 전달
* 
* <<3. 프로토콜 체계>>
* 소켓이 통신에 사용하는  프로토콜은 몇가지로 부류가 나뉜다. 그리고 socket 함수의 첫 번째 인자로, 이 부류 정보를 전달해야 한다.
* 이 부류 정보를 가르켜 "프로토콜 체계"라고 하며 종류는 다음과 같다.
* PF_INET	: ipv4 인터넷 프로토콜 체계
* PF_INET6	: ipv6 인터넷 프로토콜 체계
* PF_LOCAL	: 로컬 통신을 위한 UNIX 프로토콜 체계
* PF_PACKET	: low level 소켓을 위한 프로토콜 체계
* PF_IPX	: 노벨 프로토콜 체계
* 
* <<4. 소켓의 타입>>
* 소켓의 타입이란 소켓의 데이터 전송 방식을 의마한다. 이 정보를 socket 함수의 두 번째 인자로 전달해야 한다.
* 두 가지의 소켓 데이터 전달 방식이 있다.
* 1) 연결 지향형 소켓(SOCK_STREAM)
* a. 중간에 데이터가 소멸하지 않는다.
* b. 전송 순서대로 데이터가 수신된다.
* c. 전송되는 데이터의 경계가 존재하지 않는다.
* d. 소켓 대 소켓의 연결은 반드시 1:1 이어야 한다.
* 
* 2) 비 연결 지향형 소켓(SOCK_DGRAM)
* a. 전송 순서에 상관 없이 가장 빠른 전송을 지향한다.
* b. 전송되는 데이터가 손실될 우려가 있다.
* c. 전송되는 데이터의 경계가 존재한다.
* d. 한번에 전송할 수 있는 데이터의 크기가 제한된다.
* 
* <<5. 프로토콜의 선택>>
* 대부분의 경우 세 번째 인자로 0을 넘겨줘도 우리가 원하는 소켓을 생성할 수 있으나, 다음과 같은 상황 때문에 세 번째 인자는 필요하다.
* "하나의 프로토콜 체계 안에서 데이터 전송 방식이 동일한 프로토콜이 둘 이상 존재하는 경우"
* 이런 경우 세 번째 인자로 프로토콜을 구체화 해줘야 한다.
* 
* 
* 이제 설명한 내용을 토대로 소켓을 만들어 보자.
* "ipv4 인터넷 프로토콜 체계에서 동작하는 연결지향형 데이터 전송 소켓
* SOCKET tcp_sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
* 
* "ipv4 인터넷 프로토콜 체계에서 동작하는 비연결지향형 데이터 전송 소켓
* SOCKET udp_sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
*/